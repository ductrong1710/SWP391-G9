// <auto-generated />
using System;
using Businessobjects.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Businessobjects.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250620000219_UpdateModel")]
    partial class UpdateModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Businessobjects.Models.HealthCheckConsentForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConsentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthCheckPlanId")
                        .HasColumnType("int");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForDenial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResponseTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckPlanId");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthCheckConsentForms");
                });

            modelBuilder.Entity("Businessobjects.Models.HealthCheckResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BloodPressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckUpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Checker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConsultationAppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ConsultationRecommended")
                        .HasColumnType("bit");

                    b.Property<string>("Eyesight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthCheckConsentId")
                        .HasColumnType("int");

                    b.Property<string>("Hearing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HeartRate")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("OralHealth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Spine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckConsentId")
                        .IsUnique();

                    b.ToTable("HealthCheckResults");
                });

            modelBuilder.Entity("Businessobjects.Models.HealthRecord", b =>
                {
                    b.Property<Guid>("HealthRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChronicDiseases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Eyesight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hearing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TreatmentHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VaccinationHistory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HealthRecordId");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthRecords");

                    b.HasData(
                        new
                        {
                            HealthRecordId = new Guid("a2b4c6d8-e0f2-4681-9314-123456789012"),
                            Allergies = "None",
                            ChronicDiseases = "None",
                            Eyesight = "20/20",
                            Hearing = "Normal",
                            Note = "Healthy student",
                            ParentContact = "0987654321",
                            ParentId = "P12345",
                            StudentId = new Guid("f5b7824f-5e35-4682-98d1-0e98f8dd6b31"),
                            TreatmentHistory = "No major treatments",
                            VaccinationHistory = "Up to date"
                        });
                });

            modelBuilder.Entity("Businessobjects.Models.MedicalSupply", b =>
                {
                    b.Property<int>("SupplyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplyID"));

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplyID");

                    b.ToTable("MedicalSupplies");
                });

            modelBuilder.Entity("Businessobjects.Models.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationId"));

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicationId");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("Businessobjects.Models.MedicationSubmissionForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConsumptionTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentsNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("MedicationSubmissionForms");
                });

            modelBuilder.Entity("Businessobjects.Models.PeriodicHealthCheckPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CheckupContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("PeriodicHealthCheckPlans");
                });

            modelBuilder.Entity("Businessobjects.Models.Profile", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            ProfileId = new Guid("f5b7824f-5e35-4682-98d1-0e98f8dd6b31"),
                            Class = "Admin Class",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin User",
                            Note = "Admin profile",
                            Phone = "1234567890",
                            Sex = "Male",
                            UserId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870")
                        });
                });

            modelBuilder.Entity("Businessobjects.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleType = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleType = "User"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleType = "Nurse"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleType = "Teacher"
                        });
                });

            modelBuilder.Entity("Businessobjects.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            Password = "admin123",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            UserId = new Guid("d8663e5e-7494-4f81-8739-6e0de1bea7ee"),
                            Password = "user123",
                            Role = "User",
                            Username = "user"
                        },
                        new
                        {
                            UserId = new Guid("b9e7d454-99df-4506-8c0f-3b2c33c21d12"),
                            Password = "nurse123",
                            Role = "Nurse",
                            Username = "nurse"
                        });
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationConsentForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConsentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForDenial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResponseTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VaccinationPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("VaccinationPlanId");

                    b.ToTable("VaccinationConsentForms");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("VaccinationPlans");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActualVaccinationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConsentFormId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Performer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostVaccinationReaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VaccineTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsentFormId")
                        .IsUnique();

                    b.HasIndex("VaccineTypeId");

                    b.ToTable("VaccinationResults");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccineType", b =>
                {
                    b.Property<int>("VaccinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VaccinationId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VaccinationId");

                    b.ToTable("VaccinationTypes");
                });

            modelBuilder.Entity("Businessobjects.Models.HealthCheckConsentForm", b =>
                {
                    b.HasOne("Businessobjects.Models.PeriodicHealthCheckPlan", "HealthCheckPlan")
                        .WithMany("ConsentForms")
                        .HasForeignKey("HealthCheckPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Businessobjects.Models.Profile", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheckPlan");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Businessobjects.Models.HealthCheckResult", b =>
                {
                    b.HasOne("Businessobjects.Models.HealthCheckConsentForm", "HealthCheckConsent")
                        .WithOne()
                        .HasForeignKey("Businessobjects.Models.HealthCheckResult", "HealthCheckConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheckConsent");
                });

            modelBuilder.Entity("Businessobjects.Models.HealthRecord", b =>
                {
                    b.HasOne("Businessobjects.Models.Profile", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Businessobjects.Models.MedicationSubmissionForm", b =>
                {
                    b.HasOne("Businessobjects.Models.Profile", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Businessobjects.Models.PeriodicHealthCheckPlan", b =>
                {
                    b.HasOne("Businessobjects.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Businessobjects.Models.Profile", b =>
                {
                    b.HasOne("Businessobjects.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Businessobjects.Models.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationConsentForm", b =>
                {
                    b.HasOne("Businessobjects.Models.Profile", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Businessobjects.Models.VaccinationPlan", "VaccinationPlan")
                        .WithMany("ConsentForms")
                        .HasForeignKey("VaccinationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("VaccinationPlan");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationPlan", b =>
                {
                    b.HasOne("Businessobjects.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationResult", b =>
                {
                    b.HasOne("Businessobjects.Models.VaccinationConsentForm", "ConsentForm")
                        .WithOne("VaccinationResult")
                        .HasForeignKey("Businessobjects.Models.VaccinationResult", "ConsentFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Businessobjects.Models.VaccineType", "VaccineType")
                        .WithMany("VaccinationResults")
                        .HasForeignKey("VaccineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConsentForm");

                    b.Navigation("VaccineType");
                });

            modelBuilder.Entity("Businessobjects.Models.PeriodicHealthCheckPlan", b =>
                {
                    b.Navigation("ConsentForms");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationConsentForm", b =>
                {
                    b.Navigation("VaccinationResult");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationPlan", b =>
                {
                    b.Navigation("ConsentForms");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccineType", b =>
                {
                    b.Navigation("VaccinationResults");
                });
#pragma warning restore 612, 618
        }
    }
}
